---
title: About the azure_virtual_network Resource
platform: azure
---

# azure\_virtual\_network

Use the `azure_virtual_network` InSpec audit resource to ensure that a Virtual Network (vNet) has been provisioned correctly.

## Syntax

The name of the vNet and the resource group are required as properties to the resource.

    describe azure_virtual_machine(group_name: 'MyResourceGroup', name: 'MyNetworkName') do
      its('property') { should eq 'value' }
    end

where

* `MyNetworkName` is the name of the virtual network as seen in Azure
* `MyResourceGroup` is the name of the network's resource group
* `property` is one of the resource properties
* `value` is the expected output from the matcher

## Examples

The following examples show to use this InSpec audit resource.

### Check that the first data disk is of the correct size

    describe azure_virtual_network(group_name: 'InSpec-Azure', name: 'vnet-01') do

         # Check that this named resource is indeed a virtual network
        its('type') { should cmp 'Microsoft.Network/virtualNetworks' }
        its('location') { should cmp 'westeurope' }


        # Ensure that the address prefix for the VNet is correct
        # This will return an array so the `include` matcher needs to be used to
        # see if the specified address prefix is present
        its('address_prefixes') { should include '10.1.1.0/24' }

        # There should be one subnet
        its('subnets_count') { should eq 1 }

    end

<br>

## Parameters

* `group_name`, `name`, `apiversion`

## Parameter Examples

The options that can be passed to the resource are as follows.

### group_name (required)

Use this parameter to define the Azure Resource Group to be tested.

    describe azure_virtual_network(group_name: 'InSpec-Azure') do
        ...
    end

### name

Use this parameter to define the name of the Azure resource to test.

    describe azure_virtual_network(group_name: 'InSpec-Azure', name: 'vnet-01') do
        ...
    end

### apiversion

The API Version to use when querying the resource. Defaults to the latest version for the resource.

    describe azure_virtual_network(group_name: 'InSpec-Azure', name: 'vnet-01', apiversion: '2.0') do
        ...
    end

These options can also be set using the environment variables:

* `AZURE_RESOURCE_GROUP_NAME`
* `AZURE_RESOURCE_NAME`
* `AZURE_RESOURCE_API_VERSION`

When the options have been set as well as the environment variables, the environment variables take priority.

<br>

## Properties

* `id`,`type`, `location`, `name`, `address_prefixes`, `has_dns_servers`, `dns_servers_count`, `has_subnets`, `subnets_count`, `connected_subnets`

<br>

## Property Examples

This InSpec audit resource has the following properties that can be tested:

### type

The Azure Resource type. For a virtual machine this will always return `Microsoft.Compute/virtualMachines`

    its('type') { should cmp 'Microsoft.Compute/virtualNetworks' }

### location

Where the machine is located

    its('location') { should eq 'westus' }

### name

Name of the Virtual Machine in Azure. Be aware that this is not the computer name or hostname, rather the name of the machine when seen in the Azure Portal.

    its('name') { should cmp 'vnet-001' }

### address_prefixes

The address space or address prefixes of this virtual network.

    # Ensure that the address prefix for the VNet is correct
    # This will return an array so the `include` matcher needs to be used to
    # see if the specified address prefix is present
    its('address_prefixes') { should include '10.1.1.0/24' }

### has_dns_servers

Check if the virtual network has dns servers.

    its('has_dns_servers') { should eq true }

### dns_servers_count

The count of dns server entries for this network.

    its('dns_servers_count') { should eq > 0 }

### has_subnets

Test that returns the true if there are subnets attached to this vNet, false otherwise.

        its('has_subnets') { should eq true }

### subnets_count

Return the total number of subnets attached to this vNet.

    its('subnets_count') { should eq > 0 }

### connected_subnets

Returns an array of subnet names

    its('connected_subnets') { should include 'vnet-001' }

<br>

## Matchers

There are a number of built in comparison operrtors that are available to test the result with an expected value.

For information on all that are available please refer to the [Inspec Matchers Reference](https://www.inspec.io/docs/reference/matchers/) page.

### boot\_diagnostics?

Boolean test to see if boot diagnostics have been enabled on the machine

    it { should have_boot_diagnostics }

### have\_custom\_data

Returns a boolean stating if the machine has custom data assigned to it.

    it { should have_custom_data }

### have\_data\_disks

Denotes if the machine has data disks attached to it or not.

    it { should have_data_disks }

### have\_managed\_osdisk

Determine if the operating system disk is a Managed Disks or not.

This test can be used in the following way:

    it { should have_managed_osdisk }

### have\_nics

Returns a boolean to state if the machine has NICs connected or not.

This has can be used in the following way:

    it { should have_nics }

### have\_password\_authentication

Returns a boolean to denote if the machine is accessible using a password.

    it { should have_password_authentication }

### have\_ssh\_keys

Boolean to state if the machine has SSH keys assigned to it

    it { should have_ssh_keys }

For a Windows machine this will always be false.

<br>

## Tags

It is possible to test the tags that have been assigned to the resource. There are a number of properties that can be called to check that it has tags, that it has the correct number and that the correct ones are assigned.

### have\_tags

This is a simple test to see if the machine has tags assigned to it or not.

    it { should have_tags }

### tag\_count

Returns the number of tags that are assigned to the resource

    its ('tag_count') { should eq 2 }

### tags

It is possible to check if a specific tag has been set on the resource.

    its('tags') { should include 'Owner' }

### xxx\_tag

To get the value of the tag, a number of tests have been craeted from the tags that are set.

For example, if the following tag is set on a resource:

* owner: J.G. Jingleheimerschmidt

Then a test is available called `Owner_tag`.

    its('owner_tag') { should cmp 'J.G. Jingleheimerschmidt' }

Note: The tag name is case sensitive which makes the test case sensitive. E.g. `owner_tag` does not equal `Owner_tag`.

## References

* [Azure Ruby SDK - Resources](https://github.com/Azure/azure-sdk-for-ruby/tree/master/management/azure_mgmt_resources)
* [Virtual Machine External VM](https://github.com/chef/inspec/blob/fc990346f2438690f0ac36a9f6606e61574a79b8/test/azure/verify/controls/virtual_machine_external_vm.rb)
* [Virtual Machine Internal VM](https://github.com/chef/inspec/blob/fc990346f2438690f0ac36a9f6606e61574a79b8/test/azure/verify/controls/virtual_machine_internal_vm.rb)
